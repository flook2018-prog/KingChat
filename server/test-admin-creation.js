// Test script for admin creation and login
const bcrypt = require('bcrypt');

// Test password hashing
async function testPasswordHashing() {
  console.log('üß™ Testing password hashing...\n');
  
  const testPassword = 'admin123';
  const rounds = 12;
  
  // Create hash
  const hash = await bcrypt.hash(testPassword, rounds);
  console.log('Original password:', testPassword);
  console.log('Hashed password:', hash);
  
  // Test verification
  const isValid = await bcrypt.compare(testPassword, hash);
  console.log('Hash verification:', isValid ? '‚úÖ VALID' : '‚ùå INVALID');
  
  // Test with existing hash from database
  const existingHash = '$2a$12$x3Fadf4Vfm/lPy0umF5sO.V5UEUu2LPe28KrL5W.FIAQE5d.kdD1y';
  console.log('\nüîç Testing existing database hash...');
  
  const testPasswords = ['admin123', 'admin', 'password', '123456', 'kingchat'];
  
  for (const pwd of testPasswords) {
    const match = await bcrypt.compare(pwd, existingHash);
    console.log(`Password "${pwd}": ${match ? '‚úÖ MATCH' : '‚ùå NO MATCH'}`);
  }
}

// Simulate API call
function simulateAdminCreation() {
  console.log('\nüìù Example admin creation API call:');
  console.log('POST /api/admin');
  console.log('Content-Type: application/json');
  console.log('\nBody:');
  console.log(JSON.stringify({
    fullName: '‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô',
    username: 'test_admin',
    password: 'test123',
    role: 'admin',
    points: 0
  }, null, 2));
  
  console.log('\nüìù Example login API call:');
  console.log('POST /api/admin-auth/login');
  console.log('Content-Type: application/json');
  console.log('\nBody:');
  console.log(JSON.stringify({
    username: 'test_admin',
    password: 'test123'
  }, null, 2));
}

async function runTests() {
  console.log('üöÄ KingChat Admin Password Test\n');
  console.log('=' .repeat(50));
  
  await testPasswordHashing();
  simulateAdminCreation();
  
  console.log('\n' + '=' .repeat(50));
  console.log('‚úÖ Test completed!');
  console.log('\nüí° Tips:');
  console.log('- ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏à‡∏∞‡∏ñ‡∏π‡∏Å hash ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
  console.log('- ‡πÉ‡∏ä‡πâ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏µ‡πà‡∏õ‡πâ‡∏≠‡∏ô‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏° (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà hash) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö login');
  console.log('- ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞ hash ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏î‡πâ‡∏ß‡∏¢ bcrypt rounds 12');
}

if (require.main === module) {
  runTests();
}

module.exports = { testPasswordHashing };